// pegboard
// Controlador del pegboard
//
// Gustavo Enrique Jiménez
// gejimenez@gmail.com
// ILAV - CONICET - 2020


// 10/03/2020 - Agregado de cables para encender los LEDs. El multiplexado 
//              deja los LEDs ligeramente encendidos, así que se agrega un 
//              cable para cada columna de LEDs y el software para
//              encenderlos.
// 06/03/2020 - Lectura de posición de fichas
// 04/03/2020 - Comienzo a escribir el programa


byte Fila1=48;//PL1; // Fila de arriba
byte Fila2=46;//PL3;
byte Fila3=44;//PL5;
byte Fila4=42;//PL7; // Fila de abajo
byte Fila5=40; // Contenedor de fichas
byte ColumnaA=38; // Columna más a la izquierda
byte ColumnaB=36;
byte ColumnaC=34;
byte ColumnaD=32; // Columna más a la derecha
byte Filas[5]={Fila1,Fila2,Fila3,Fila4,Fila5};
byte Columnas[4]={ColumnaA,ColumnaB,ColumnaC,ColumnaD};

String comando; 
byte Estados[5][4];
byte EstadosAnterior[5][4];
unsigned long time;

// the setup function runs once when you press reset or power the board
void setup() {
  Serial.begin(115200);
  Serial1.begin(115200);
  Serial.println("Iniciando pegboard-test");
  pinMode(Fila1,OUTPUT);
  pinMode(Fila2,OUTPUT);
  pinMode(Fila3,OUTPUT);
  pinMode(Fila4,OUTPUT);
  pinMode(Fila5,OUTPUT);
  digitalWrite(Fila1,LOW);
  digitalWrite(Fila2,LOW);
  digitalWrite(Fila3,LOW);
  digitalWrite(Fila4,LOW);
  digitalWrite(Fila5,LOW);
  pinMode(ColumnaA,INPUT);  
  pinMode(ColumnaB,INPUT);  
  pinMode(ColumnaC,INPUT);  
  pinMode(ColumnaD,INPUT);
  Serial.println("Puertos iniciados");
}


void LeerEstados(){
 pinMode(ColumnaA,INPUT);
 pinMode(ColumnaB,INPUT);
 pinMode(ColumnaC,INPUT);
 pinMode(ColumnaD,INPUT);
 pinMode(Fila1,OUTPUT);
 pinMode(Fila2,OUTPUT);
 pinMode(Fila3,OUTPUT);
 pinMode(Fila4,OUTPUT);
 pinMode(Fila5,OUTPUT);



 // EstadosAnterior=Estados;
 memcpy(EstadosAnterior, Estados, 20);

 for (int fila=0;fila<4;fila++){
  pinMode(Filas[fila],OUTPUT);
  digitalWrite(Filas[fila],HIGH);
  delayMicroseconds(10);
  Estados[fila][0]=digitalRead(ColumnaA);
  Estados[fila][1]=digitalRead(ColumnaB);
  Estados[fila][2]=digitalRead(ColumnaC);
  Estados[fila][3]=digitalRead(ColumnaD);
  delayMicroseconds(50);
  Estados[fila][0]=Estados[fila][0] && digitalRead(ColumnaA);
  Estados[fila][1]=Estados[fila][1] && digitalRead(ColumnaB);
  Estados[fila][2]=Estados[fila][2] && digitalRead(ColumnaC);
  Estados[fila][3]=Estados[fila][3] && digitalRead(ColumnaD);
  digitalWrite(Filas[fila],LOW);
 }
  pinMode(ColumnaA,OUTPUT);
  pinMode(ColumnaB,OUTPUT);
  pinMode(ColumnaC,OUTPUT);
  pinMode(ColumnaD,OUTPUT);
  digitalWrite(ColumnaA,LOW);
  digitalWrite(ColumnaB,LOW);
  digitalWrite(ColumnaC,LOW);
  digitalWrite(ColumnaD,LOW);
}

void ProcesarEstados(){
 for (int fila=0;fila<4;fila++){
  for (int columna=0;columna<4;columna++){
   if (Estados[fila][columna]!=EstadosAnterior[fila][columna]){
    String mensaje;
    String SiNo;
    if (Estados[fila][columna]==1){SiNo="Si";} else {SiNo="No";}
    mensaje=String(char(fila+49))+String(char(columna+65))+" "+SiNo+" "+String(millis());
    Serial.println(mensaje);
    delay(100);
   }
  }
 }
}

// the loop function runs over and over again forever
void loop() {

 char fin=10;

 LeerEstados();
 ProcesarEstados();

  if (Serial.available()){
    comando=Serial.readStringUntil(fin);
  }

  if (Serial1.available()){
    comando=Serial1.readStringUntil(fin);
  }
}
